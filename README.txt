# TaskLibrary
- Библиотека для работы с заданиями
- Класс Task имеет 6 полей - название задания, описание, статус выполнения, дата начала, дата окончания
- В основном приложении пользователь создает объект класса Task
- Пользователь может изменить статус задания, а также получить доступ к любому из полей класса

Статические библиотеки в C++
1.	Общая информация
•	Статическая библиотека состоит из подпрограмм, которые непосредственно компилируются и линкуются с вашей программой.
•	При компиляции программы, которая использует статическую библиотеку, весь функционал статической библиотеки (тот, что использует ваша программа) становится частью вашего исполняемого файла
•	В Windows статические библиотеки имеют расширение .lib (от «library»)

•	Одним из преимуществ статических библиотек является то, что вам нужно распространять всего лишь 1 файл (исполняемый файл), дабы пользователи могли запустить и использовать вашу программу. 
•	Поскольку статические библиотеки становятся частью вашей программы, то вы можете использовать их подобно функционалу своей собственной программы

2.	Создание статической библиотеки
•	Видео: https://www.youtube.com/watch?v=Wt4dxDNmDA8&list=PLAfbBTi5YIcmsdou-R7Jp_iEnzIZn8-gZ&index=2&t=0s

3.	Пошаговое руководство (для Visual Studio 2019 (2017+))
a.	Основная информация: https://docs.microsoft.com/ru-ru/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=vs-2019
b.	Создаем пустой проект
c.	В свойствах проекта в разделе Тип Конфигурации указать “статическая библиотека .lib”
d.	Создаем папку src, в которой будут исходные файлы
e.	В src создаем 2 файла - .cpp и файл заголовка ‘.h’
i.	Файл Заголовка (header):
1.	Основная информация: https://docs.microsoft.com/ru-ru/cpp/cpp/header-files-cpp?view=vs-2019
2.	Грубо говоря, в хэдере нужно писать шаблон своей программы, без реализации (например, названия и типы атрибутов и методов класса)
ii.	В файле .cpp пишем реализацию ранее заданных нами методов в файле заголовка (можем сделать это прямо из хэдера – нажать на «показать возможные решения» рядом с методом и выбрать создать определение в *.cpp)
f.	В этом же решении создаем второй проект, который будет использовать нашу статическую библиотеку
g.	Также создаем папку src и файл .cpp в ней
h.	Переходим в свойства нового проекта  C/C++  Общие  Дополнительные каталоги включаемых файлов  Указываем путь к папке src в первом проекте
i.	В нашем .cpp файле подключаем файл *.h (#include "*.h")
j.	Нажимаем правой кнопкой мыши по новому проекту  Добавить  Ссылка  <Наша библиотека>
k.	Теперь все готово, можно использовать методы и классы из нашей библиотеки в основном приложении 
